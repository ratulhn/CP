
//**********Binary Exponentiation************//

int binEx(int a, int b) {
    int ans=1;
    while(b>0) {
        if(b&1) ans = (1ll*ans*a)%M;
        b>>=1;
        a = (1ll*a*a)%M;
    }
    return ans;
}

//**********Binary Exponentiation (M<=1e18) ************//

ll binEx(ll a, ll b) {
    ll ans=1;
    while(b>0) {
        if(b&1) ans = binMultiply(ans,a);
        b>>=1;
        a = binMultiply(a,a);
    }
    return ans;
}

ll binMultiply(ll a, ll b) {
    ll ans=0;
    while(b>0) {
        if(b&1) ans = (ans+a)%M;
        b>>=1;
        a = (a+a)%M;
    }
    return ans;
}



//*************** nCr nPr ********************//

int N = 1e6+10;
vector<int>f(N);
 
void fact() {
    f[0]=1;
    for(int i=1; i<N; i++) {
        f[i] = (1ll*f[i-1]*i)%M;
    }
}
 
int bex(int a, int b, int m) {
    int ans=1;
    while(b>0) {
        if(b&1) ans = (1ll*ans*a)%m;
        b>>=1;
        a = (1ll*a*a)%m;
    }
    return ans;
}
 
int nCr(int n, int r) {
    if(n<r) return 0;
    int den = bex(f[r],M-2,M)*1ll*bex(f[n-r],M-2,M)%M;
    return (f[n]*1ll*den)%M;
}

int nPr(int n, int r) {
    if(n<r) return 0;
    int den = bex(f[n-r],M-2,M)%M;
    return (f[n]*1ll*den)%M;
}


//*************** Prime ********************//


const int N=1e7+10;
vector<bool> isPrime(N,1);

void prime() {
    isPrime[0]=isPrime[1]=false;

    for(int i=2; i<N; i++) {
        if(isPrime[i]==true) {
            for(int j=2*i; j<N; j+=i) {
                isPrime[j]=false;
            }
        }
    }
}
